// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Permissions {
  permId       String    @id @map("perm_id") @db.VarChar(100)
  permUrId     String    @map("perm_ur_id") @db.VarChar(100)
  userRoles    UserRoles @relation(fields: [permUrId], references: [urId])
  permFolderId String    @map("perm_folder_id") @db.VarChar(100)
  // TODO: relation to Folders model
  permIsActive Boolean   @default(true) @map("perm_is_active")
}

model UserRoles {
  urId        String        @id @map("ur_id") @db.VarChar(100)
  urName      String        @unique @map("ur_name") @db.VarChar(60)
  urIsActive  Boolean       @default(true) @map("ur_is_active")
  permissions Permissions[]
  users       Users[]
}

model Users {
  userId       String    @id @map("user_id") @db.VarChar(100)
  userFullname String    @map("user_fullname") @db.VarChar(60)
  userUsername String    @unique @map("user_username") @db.VarChar(60)
  userPassword String    @map("user_password") @db.VarChar(60)
  userRoleId   String    @map("user_role_id") @db.VarChar(60)
  userRole     UserRoles @relation(fields: [userRoleId], references: [urId])
  userIsActive Boolean   @default(true) @map("user_is_active")
  userLogs     UserLogs[]
  files Files[]
}

model Files {
  fileId       String    @id @map("file_id") @db.VarChar(100)
  fileUserId    String    @map("file_user_id") @db.VarChar(100)
  fileName     String    @map("file_name") @db.Text
  filePath     String    @map("file_path") @db.Text
  fileBase     Bytes    @map("file_base") @db.Blob
  createdAt DateTime @default(now())
  folderFiles FolderFiles[]
  fileContents FileContents[]  
  user Users @relation(fields: [fileUserId], references: [userId])
}

model Folders {
  folderId       String    @id @map("folder_id") @db.VarChar(100)
  folderName     String    @map("folder_name") @db.Text
  folderPath     String    @map("folder_path") @db.Text
  folderParentId String?    @map("folder_parent_id") @db.VarChar(100) 
  folderUserId   String    @map("folder_user_id") @db.VarChar(100)
  folderDepth    Int       @map("folder_depth") @db.Int
  createdAt DateTime @default(now())
  folderFiles FolderFiles[]
}

model FolderFiles {
  ffId String    @id @map("ff_id") @db.VarChar(100)
  ffFolderId String    @map("ff_folder_id") @db.VarChar(100)
  ffFileId String    @map("ff_file_id") @db.VarChar(100)
  folders Folders @relation(fields: [ffFolderId], references: [folderId])
  files Files @relation(fields: [ffFileId], references: [fileId])
}

model Companies {
  compId       String    @id @map("comp_id") @db.VarChar(100)
  compName     String    @map("comp_name") @db.Text
  companyDepartments CompanyDepartments[]
}

model Departments {
  deptId       String    @id @map("dept_id") @db.VarChar(100)
  deptName     String    @map("dept_name") @db.VarChar(60)
  companyDepartments CompanyDepartments[]
}

model CompanyDepartments {
  cdId String    @id @map("cd_id") @db.VarChar(100)
  cdCompId String    @map("cd_comp_id") @db.VarChar(100)
  cdDeptId String    @map("cd_dept_id") @db.VarChar(100)
  companies Companies @relation(fields: [cdCompId], references: [compId])
  departments Departments @relation(fields: [cdDeptId], references: [deptId])
}

model UserLogs {
  ulId       String    @id @map("ul_id") @db.VarChar(100)
  ulUserId    String    @map("ul_user_id") @db.VarChar(100)
  ulDescription String    @map("ul_description") @db.Text
  createdAt DateTime @default(now())
  user Users @relation(fields: [ulUserId], references: [userId])
}

model FileContents{
  fcId       String    @id @map("fc_id") @db.VarChar(100)
  fcFileId String    @map("fc_file_id") @db.VarChar(100)
  fc_content String    @map("fc_content") @db.LongText
  file Files @relation(fields: [fcFileId], references: [fileId])
}