openapi: 3.0.0
info:
  title: Fileguard API
  description: Test
  version: 0.0.1

servers:
  - url: http://localhost:3000

tags:
  - auth
  - health
  - files
  - folders
  - users
  - user-roles
  - permissions
  - departments
  - user-logs

paths:
  /auth/me:
    get:
      tags:
        - auth
      summary: Get current user info
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          description: User is currently not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/login:
    post:
      tags:
        - auth
      summary: Log in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/logout:
    delete:
      tags:
        - auth
      summary: Log out
      responses:
        '204':
          description: Successful operation
        '401':
          description: User is currently not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /health:
    get:
      tags:
        - health
      summary: Get system health stats
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Health'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /files:
    get:
      tags:
        - files
      summary: Get all files

  /folders:
    get:
      tags:
        - folders
      summary: Get all folders

  /users:
    get:
      tags:
        - users
      summary: Get all users

  /user-roles:
    get:
      tags:
        - user-roles
      summary: Get all user roles
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserRole'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - user-roles
      summary: Create a user role
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                urName:
                  type: string
              required:
                - urName
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserRole'
        '400':
          description: Invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /user-roles/{userRoleId}:
    get:
      tags:
        - user-roles
      summary: Get a user roles
      parameters:
        - name: userRoleId
          in: path
          description: ID of UserRole to return
          required: true
          schema:
            type: string
            format: nanoid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserRole'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - user-roles
      summary: Update a user role
      parameters:
        - name: userRoleId
          in: path
          description: ID of UserRole to update
          required: true
          schema:
            type: string
            format: nanoid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                urName:
                  type: string
              required:
                - urName
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserRole'
        '400':
          description: Invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /user-roles/{userRoleId}/toggle:
    put:
      tags:
        - user-roles
      summary: Toggle user role isActive state
      parameters:
        - name: userRoleId
          in: path
          description: ID of UserRole to toggle
          required: true
          schema:
            type: string
            format: nanoid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserRole'
        '400':
          description: Invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /permissions:
    get:
      tags:
        - permissions
      summary: Get all permissions

  /departments:
    get:
      tags:
        - departments
      summary: Get all departments

  /user-logs:
    get:
      tags:
        - user-logs
      summary: Get all logs

components:
  schemas:
    User:
      type: object
      properties:
        userId:
          type: string
          format: nanoid
          example: aofJcp3aUpuQ1m4QXbZHN
        userFullname:
          type: string
          example: John Doe
        userUsername:
          type: string
          example: John Doe
        userRoleId:
          type: string
          format: nanoid
          example: aofJcp3aUpuQ1m4QXbZHN
        userIsActive:
          type: boolean
    Health:
      type: object
      properties:
        uptime:
          type: number
          format: float
        message:
          type: string
        date:
          type: string
          format: date-time
    UserRole:
      type: object
      properties:
        urId:
          type: string
          format: nanoid
          example: aofJcp3aUpuQ1m4QXbZHN
        urName:
          type: string
          example: admin
        urIsActive:
          type: boolean
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
    SuccessResponse:
      type: object
      properties:
        data:
          oneOf:
            - $ref: '#/components/schemas/User'
            - $ref: '#/components/schemas/Health'
