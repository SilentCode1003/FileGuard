openapi: 3.0.0
info:
  title: Fileguard API
  description: Test
  version: 0.0.1

servers:
  - url: http://localhost:3000

tags:
  - auth
  - health
  - files
  - folders
  - users
  - user-roles
  - permissions
  - departments
  - user-logs

paths:
  /auth/me:
    get:
      tags:
        - auth
      summary: Get current user info
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          description: User is currently not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/login:
    post:
      tags:
        - auth
      summary: Log in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/logout:
    delete:
      tags:
        - auth
      summary: Log out
      responses:
        '204':
          description: Successful operation
        '401':
          description: User is currently not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /health:
    get:
      tags:
        - health
      summary: Get system health stats
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Health'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /files:
    get:
      tags:
        - files
      summary: Get all files
      parameters:
        - in: query
          name: searchText
          schema:
            type: string
          description: The text to search
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Files'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - files
      summary: Create a file
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: object
                    properties:
                      file:
                        type: string
                      fileName:
                        type: string
                      fileMimeType:
                        type: string
                      filePath:
                        type: string
        responses:
          '200':
            description: Successful operation
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/Files'
          '400':
            description: Invalid data
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          '401':
            description: Invalid credentials
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'

  /folders:
    get:
      tags:
        - folders
      summary: Get all folders based on query params
      parameters:
        - in: query
          name: folderPath
          schema:
            type: string
          required: true
          description: The path of the folder to get
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Folders'
        '400':
          description: Invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - folders
      summary: Create a new folder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                folderName:
                  type: string
                folderPath:
                  type: string
                folderDepth:
                  type: number
                  format: integer
                  example: 1
              required:
                - folderName
                - folderPath
                - folderUserId
                - folderDepth
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Folders'
        '400':
          description: Invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users:
    get:
      tags:
        - users
      summary: Get all users
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Users'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - users
      summary: Create a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userFullname:
                  type: string
                userUsername:
                  type: string
                userPassword:
                  type: string
                userRoleId:
                  type: string
                  format: nanoid
                  example: aofJcp3aUpuQ1m4QXbZHN
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Users'
        '400':
          description: Invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - users
      summary: Update a user
      parameters:
        - name: userId
          in: path
          description: The id of the user to update
          required: true
          schema:
            type: string
            format: nanoid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userFullname:
                  type: string
                userUsername:
                  type: string
                userPassword:
                  type: string
                userRoleId:
                  type: string
                  format: nanoid
                  example: aofJcp3aUpuQ1m4QXbZHN
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Users'
        '400':
          description: Invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{userId}/toggle:
    put:
      tags:
        - users
      summary: Toggle user isActive state
      parameters:
        - name: userId
          in: path
          description: The id of the user to toggle
          required: true
          schema:
            type: string
            format: nanoid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Users'
        '400':
          description: Invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user-roles:
    get:
      tags:
        - user-roles
      summary: Get all user roles
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserRole'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - user-roles
      summary: Create a user role
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                urName:
                  type: string
              required:
                - urName
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserRole'
        '400':
          description: Invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /user-roles/{userRoleId}:
    get:
      tags:
        - user-roles
      summary: Get a user roles
      parameters:
        - name: userRoleId
          in: path
          description: ID of UserRole to return
          required: true
          schema:
            type: string
            format: nanoid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserRole'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - user-roles
      summary: Update a user role
      parameters:
        - name: userRoleId
          in: path
          description: ID of UserRole to update
          required: true
          schema:
            type: string
            format: nanoid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                urName:
                  type: string
              required:
                - urName
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserRole'
        '400':
          description: Invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /user-roles/{userRoleId}/toggle:
    put:
      tags:
        - user-roles
      summary: Toggle user role isActive state
      parameters:
        - name: userRoleId
          in: path
          description: ID of UserRole to toggle
          required: true
          schema:
            type: string
            format: nanoid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserRole'
        '400':
          description: Invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /permissions:
    get:
      tags:
        - permissions
      summary: Get all permissions

  /departments:
    get:
      tags:
        - departments
      summary: Get all departments

  /user-logs:
    get:
      tags:
        - user-logs
      summary: Get all logs
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserLogs'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - user-logs
      summary: Create a user log
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ulDescription:
                  type: string
              required:
                - ulDescription
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserLogs'
        '400':
          description: Invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    User:
      type: object
      properties:
        userId:
          type: string
          format: nanoid
          example: aofJcp3aUpuQ1m4QXbZHN
        userFullname:
          type: string
          example: John Doe
        userUsername:
          type: string
          example: John Doe
        userRoleId:
          type: string
          format: nanoid
          example: aofJcp3aUpuQ1m4QXbZHN
        userIsActive:
          type: boolean
    Files:
      type: object
      properties:
        fileId:
          type: string
          format: nanoid
          example: aofJcp3aUpuQ1m4QXbZHN
        fileUserId:
          type: string
          format: nanoid
          example: aofJcp3aUpuQ1m4QXbZHN
        user:
          $ref: '#/components/schemas/User'
        fileName:
          type: string
          example: test.txt
        filePath:
          type: string
          example: test.txt
        createdAt:
          type: string
          format: date-time
          example: '2022-01-01T00:00:00.000Z'
    Folders:
      type: object
      properties:
        folderId:
          type: string
          format: nanoid
          example: aofJcp3aUpuQ1m4QXbZHN
        folderName:
          type: string
          example: test
        folderPath:
          type: string
          example: test
        folderParentId:
          type: string
          format: nanoid
          example: aofJcp3aUpuQ1m4QXbZHN
        folderUserId:
          type: string
          format: nanoid
          example: aofJcp3aUpuQ1m4QXbZHN
        folderDepth:
          type: number
          format: integer
          example: 1
        createdAt:
          type: string
          format: date-time
          example: '2022-01-01T00:00:00.000Z'
    Health:
      type: object
      properties:
        uptime:
          type: number
          format: float
        message:
          type: string
        date:
          type: string
          format: date-time
    Users:
      type: object
      properties:
        userId:
          type: string
          format: nanoid
          example: aofJcp3aUpuQ1m4QXbZHN
        userFullname:
          type: string
          example: John Doe
        userUsername:
          type: string
          example: John Doe
        userRoleId:
          type: string
          format: nanoid
          example: aofJcp3aUpuQ1m4QXbZHN
        role:
          $ref: '#/components/schemas/UserRole'
        userIsActive:
          type: boolean
    UserRole:
      type: object
      properties:
        urId:
          type: string
          format: nanoid
          example: aofJcp3aUpuQ1m4QXbZHN
        urName:
          type: string
          example: admin
        urIsActive:
          type: boolean
    UserLogs:
      type: object
      properties:
        ulId:
          type: string
          format: nanoid
          example: aofJcp3aUpuQ1m4QXbZHN
        ulUserId:
          type: string
          format: nanoid
          example: aofJcp3aUpuQ1m4QXbZHN
        user:
          $ref: '#/components/schemas/User'
        ulDescription:
          type: string
          example: test
        createdAt:
          type: string
          format: date-time
          example: '2022-01-01T00:00:00.000Z'
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
    SuccessResponse:
      type: object
      properties:
        data:
          oneOf:
            - $ref: '#/components/schemas/User'
            - $ref: '#/components/schemas/Health'
